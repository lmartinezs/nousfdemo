# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest
resources:
  repositories:
  - repository: githubrepo # The name used to reference this repository in the checkout step
    type: github
    endpoint: lmartinezs
    name: lmartinezs/nousfdemo  

variables:
  GIT_COMMIT: $(Build.SourceVersion)
  GIT_BRANCH: $(Build.SourceBranchName)
  CURRENT_PRERELEASE: 12
  PRE_RELEASE_BRANCH: none
  PRE_RELEASE: PRE_RELEASE  

jobs:
  - job: check_prerelease
    steps:
    - checkout: githubrepo
    - script: | 
            if [[ $(gh release list | grep -E 'Draft|Pre-release' | wc -l) -ne 0 ]]; then
              echo "There is an open Pre-release"
              PRE_RELEASE=current_one
              PRE_RELEASE_BRANCH=rc/$(gh release list | grep -E 'Pre-release' | awk -F' ' '{print $1}')
              #echo "PRE_RELEASE_BRANCH=$(PRE_RELEASE_BRANCH)" >> $GITHUB_ENV
              echo "##vso[task.setvariable variable=PRE_RELEASE_BRANCH]$PRE_RELEASE_BRANCH"
              LATEST_PRERELEASE_TAG=$(gh release list | grep -E 'Pre-release' | awk -F' ' '{print $3}')
              echo "##vso[task.setvariable variable=CURRENT_PRERELEASE]$LATEST_PRERELEASE_TAG"
              echo "Current Pre-release: $LATEST_PRERELEASE_TAG in branch $PRE_RELEASE_BRANCH"
            else
              PRE_RELEASE=new_one
            fi
            #echo "PRE_RELEASE=$PRE_RELEASE"  >> $GITHUB_ENV
            echo "##vso[task.setvariable variable=PRE_RELEASE]$PRE_RELEASE"
            echo $PRE_RELEASE
            echo "##vso[task.setvariable variable=open_pr;isOutput=true]$PRE_RELEASE"

      displayName: 'check_open_prerelease'
      name: check_open_prerelease
      env:
        GH_TOKEN: $(gh_token)
    - script: | 
        echo $(GIT_COMMIT)
        echo $(GIT_BRANCH)
        echo $(CURRENT_PRERELEASE)
        echo $(PRE_RELEASE)
      displayName: 'Run a multi-line script'
  - job: create_new_pre_prelease
    dependsOn: check_prerelease
    condition: eq(dependencies.check_prerelease.outputs['check_open_prerelease.open_pr'], 'new_one') #map doThing and check the value
    steps: 
    - script: |
        echo "##vso[task.setvariable variable=latest_tag]1.0.1"
        echo "##vso[task.setvariable variable=calculated_next_version]1.0.2"
      displayName: Initialize mandatory git config    
      name: cc   

    - script: |
        git config --local user.name "lmartinezs"
        git config --local user.email "lmartinezs@gmail.com"
      displayName: Initialize mandatory git config    
    - script: |
        if [[ "$(latest_tag)" == "$(calculated_next_version)" ]] 
        then
          echo "- No changes"
          exit 1
        fi
        #echo "PRE_RELEASE_BRANCH=$(calculated_next_version)" >> $GITHUB_ENV
        #echo "NEW_TAG=$(calculated_next_version)-rc.0" >> $GITHUB_ENV
        #echo "LATEST_RELEASE=$(gh release list | grep -E 'Latest' | awk -F' ' '{print $3}')" >> $GITHUB_ENV
        
        echo "##vso[task.setvariable variable=PRE_RELEASE_BRANCH;]$(calculated_next_version)"
        echo "##vso[task.setvariable variable=NEW_TAG;]$(calculated_next_version)"
        echo "##vso[task.setvariable variable=LATEST_RELEASE;]$(gh release list | grep -E 'Latest' | awk -F' ' '{print $3}')"
      displayName: Check next version
      env:
        GH_TOKEN: $(gh_token)

    #- checkout: githubnextv
    #  path: .github/actions/my-action            
  - job: push_to_current_prerelease
    dependsOn: check_prerelease    
    condition: eq(dependencies.check_prerelease.outputs['check_open_prerelease.open_pr'], 'current_one') #map doThing and check the value
    steps: 
    - script: 'echo current hello world'